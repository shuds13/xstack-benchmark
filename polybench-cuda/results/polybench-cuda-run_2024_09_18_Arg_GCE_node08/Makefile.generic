RUN_TIMEOUT?=7200 # 2 hours.
CUDAFE=/scratch/xcellent/shudson/CudaFE
#LLVM18=/u/NAS_SCRATCH/yc0769/xstack/xstack-installs/polygeist-llvm-install
#POLYGEIST=/u/NAS_SCRATCH/yc0769/xstack/xstack-installs/polygeist-install
#NOELLE=/u/NAS_SCRATCH/yc0769/xstack/xstack-installs/noelle-susan/install
NOELLE=/scratch/xcellent/shudson/noelle/install
# SPLENDID_CPU=/u/NAS_SCRATCH/yc0769/xstack/llvm-install-release/bin/splendid
SPLENDID_CPU=/home/shudson/xcellent/llvm-install-debug/bin/splendid
SPLENDID_GPU=/home/shudson/xcellent/llvm-install-debug/bin/splendid
#SPLENDID_ACC=/u/NAS_SCRATCH/yc0769/xstack/llvm-install-openacc/bin/splendid
#ADDITIONAL_PASSES+=-O1
#SPLENDID_CPU=splendid
#SPLENDID_LOC=splendid
#SPLENDID_GPU=splendid
#SPLENDID_ACC=splendid


nvtarget.exe: #${BMARK}_cpu.cbe.c
	clang -g -fopenmp -fopenmp-cuda-mode -Rpass=openmp-opt -Rpass-analysis=openmp-opt -Rpass-missed=openmp-opt -fopenmp-assume-no-thread-state -fopenmp-assume-no-nested-parallelism --offload-arch=native ${BMARK}_gpu.c -O3 -c -o ${BMARK}_nvtarget.o
	clang -g --offload-link ${LLVM_LIBS_DIR}/libomptarget.so ${LLVM_LIBS_DIR}/libomp.so ${BMARK}_nvtarget.o -O3 -lm -o $@ -foffload-lto -lomptarget.devicertl

nvtarget_noelle.exe: #${BMARK}_cpu.cbe.c
	clang -g -fopenmp -fopenmp-cuda-mode -Rpass=openmp-opt -Rpass-analysis=openmp-opt -Rpass-missed=openmp-opt -fopenmp-assume-no-thread-state -fopenmp-assume-no-nested-parallelism --offload-arch=native ${BMARK}_gpu_noelle.c -O3 -c -o ${BMARK}_nvtarget.o
	clang -g --offload-link ${LLVM_LIBS_DIR}/libomptarget.so ${LLVM_LIBS_DIR}/libomp.so ${BMARK}_nvtarget.o -O3 -lm -o $@ -foffload-lto -lomptarget.devicertl

amdtarget.exe: #${BMARK}_cpu.cbe.c
	clang -fopenmp -fopenmp-targets=amdgcn-amd-amdhsa -Xopenmp-target=amdgcn-amd-amdhsa -march=gfx90a --rocm-path=/opt/rocm-5.4.2/ -fopenmp-cuda-mode -Rpass=openmp-opt -Rpass-analysis=openmp-opt -Rpass-missed=openmp-opt -fopenmp-assume-no-thread-state -fopenmp-assume-no-nested-parallelism ${BMARK}_gpu.c -O3 -c -o ${BMARK}_amdtarget.o
	clang --offload-link $(FLAGS) ${LLVM_LIBS_DIR}/libomp.so ${LLVM_LIBS_DIR}/libomptarget.so ${BMARK}_amdtarget.o ${LLVM_LIBS_DIR}/libomptarget.devicertl.a -O3 -o $@

amdtarget_noelle.exe: #${BMARK}_cpu.cbe.c
	clang -fopenmp -fopenmp-targets=amdgcn-amd-amdhsa -Xopenmp-target=amdgcn-amd-amdhsa -march=gfx90a --rocm-path=/opt/rocm-5.4.2/ -fopenmp-cuda-mode -Rpass=openmp-opt -Rpass-analysis=openmp-opt -Rpass-missed=openmp-opt -fopenmp-assume-no-thread-state -fopenmp-assume-no-nested-parallelism ${BMARK}_gpu_noelle.c -O3 -c -o ${BMARK}_amdtarget.o
	clang --offload-link $(FLAGS) ${LLVM_LIBS_DIR}/libomp.so ${LLVM_LIBS_DIR}/libomptarget.so ${BMARK}_amdtarget.o ${LLVM_LIBS_DIR}/libomptarget.devicertl.a -O3 -o $@

openacc.gpu.exe:
	nvc -acc=gpu -gpu=cc70 -Minfo=accel -O3 ${BMARK}_openacc.c -o $@

openacc.cpu.exe:
	nvc -acc=multicore -Minfo=accel -O3 ${BMARK}_openacc.c -o $@

nvhpc.gpu.noelle.exe:
	nvc -mp=gpu -gpu=cc70 -Minfo=accel -Mneginfo -O4 -fast ${BMARK}_gpu_noelle.nvc.c -o $@

nvhpc.gpu.exe:
	nvc -mp=gpu -gpu=cc70 -Minfo=accel -Mneginfo -O4 -fast ${BMARK}_gpu.nvc.c -o $@

nvhpc.cpu.noelle.exe:
	nvc -mp=multicore -Minfo=accel -O4 -fast ${BMARK}_gpu_noelle.nvc.c -o $@

nvhpc.cpu.exe:
	nvc -mp=multicore -Minfo=accel -O4 -fast ${BMARK}_gpu.nvc.c -o $@

manual.clang.amd.exe: ${BMARK}_amd_manual.c
	clang -fopenmp -fopenmp-targets=amdgcn-amd-amdhsa -Xopenmp-target=amdgcn-amd-amdhsa -march=gfx90a --rocm-path=/opt/rocm-5.4.2/ -fopenmp-cuda-mode -Rpass=openmp-opt -Rpass-analysis=openmp-opt -Rpass-missed=openmp-opt -fopenmp-assume-no-thread-state -fopenmp-assume-no-nested-parallelism ${BMARK}_amd_manual.c -O3 -c -o ${BMARK}_amdtarget_m.o
	clang --offload-link $(FLAGS) ${LLVM_LIBS_DIR}/libomp.so ${LLVM_LIBS_DIR}/libomptarget.so ${BMARK}_amdtarget_m.o ${LLVM_LIBS_DIR}/libomptarget.devicertl.a -O3 -o $@

manual.clang.gpu.exe: ${BMARK}_gpu_noelle_manual.c
	clang -g -fopenmp -fopenmp-cuda-mode -Rpass=openmp-opt -Rpass-analysis=openmp-opt -Rpass-missed=openmp-opt -fopenmp-assume-no-thread-state -fopenmp-assume-no-nested-parallelism --offload-arch=native ${BMARK}_gpu_noelle_manual.c -O3 -c -o ${BMARK}_nvtarget_manual.o
	clang -g --offload-link ${LLVM_LIBS_DIR}/libomptarget.so ${LLVM_LIBS_DIR}/libomp.so ${BMARK}_nvtarget_manual.o -O3 -lm -o $@ -foffload-lto -lomptarget.devicertl

manual.nvc.gpu.exe: ${BMARK}_gpu_noelle_manual.c
	nvc -mp=gpu -gpu=cc70 -Minfo=accel -Mneginfo -O4 -fast ${BMARK}_gpu_noelle_manual.c -o $@

manual.clang.cpu.exe: ${BMARK}_cpu_noelle_manual.c
	clang -fopenmp -O3 $(FLAGS) $< -o $@

manual.gcc.cpu.exe: ${BMARK}_cpu_noelle_manual.c
	gcc -fopenmp -O3 $< -o $@ $(FLAGS)

%.ll: ${BMARK}.cu
	clang -Xclang -disable-O0-optnone -S -emit-llvm -g $<

${BMARK}_linked.bc: ${BMARK}-cuda-nvptx64-nvidia-cuda-sm_20.ll ${BMARK}.ll
	llvm-link-cudafe ${BMARK}-cuda-nvptx64-nvidia-cuda-sm_20.ll ${BMARK}.ll -o ${BMARK}_linked.bc
${BMARK}_cpu.bc: ${BMARK}_linked.bc
	#opt -load ${CUDAFE}/build/MergeKernel/libLLVMCudaFE.so -merge-kernel ${BMARK}_linked.bc -o ${BMARK}_cpu.bc 2> debug_cudafe
	#opt -load ${CUDAFE}/build/MergeKernel/libLLVMCudaFE.so -merge-kernel -mem2reg -indvars -dce ${ADDITIONAL_PASSES} ${BMARK}_linked.bc -o ${BMARK}_cpu.bc 2> debug_cudafe
	opt -load ../from_susan/libLLVMCudaFE.so -merge-kernel -mem2reg -indvars -dce ${ADDITIONAL_PASSES} ${BMARK}_linked.bc -o ${BMARK}_cpu.bc 2> debug_cudafe

${BMARK}_openacc.c: ${BMARK}_cpu.bc
	$(SPLENDID_ACC) $< 2> debug
	cp ${BMARK}_cpu.cbe.c $@

${BMARK}_cpu.c: ${BMARK}_cpu.bc
	$(SPLENDID_CPU) $< 2> debug
	cp ${BMARK}_cpu.cbe.c $@

${BMARK}_gpu.c: ${BMARK}_cpu.bc
	$(SPLENDID_GPU) $< 2> debug
	cp ${BMARK}_cpu.cbe.c $@

${BMARK}_loc.c: ${BMARK}_cpu.bc
	opt ${LOC_PASSES} $< -o temp_loc.bc 
	$(SPLENDID_LOC) temp_loc.bc 2> debug
	cp temp_loc.cbe.c $@

${BMARK}_pdg_embed.bc:${BMARK}_cpu.bc
	noelle-load -PDGAnalysis -noelle-pdg-verbose=3 -noelle-pdg-embed ${BMARK}_svf.bc -o $@

${BMARK}_loopid.bc: ${BMARK}_cpu.bc
	noelle-meta-loop-embed $< -o $@
	noelle-parallel-load -load ${NOELLE}/lib/Planner.so -planner $@ -o $@ 


${BMARK}_reduced.bc: ${BMARK}_loopid.bc
	noelle-load -load ${NOELLE}/lib/ParallelizationTechnique.so -load ${NOELLE}/lib/DOALL.so -load ${NOELLE}/lib/DSWP.so -load ${NOELLE}/lib/Heuristics.so -load ${NOELLE}/lib/Parallelizer.so -load ${CUDAFE}/build/NoelleDOALL/libNoelleDOALL.so -noelle-verbose=3 -noelle-doall ${ADDITIONAL_PASSES}  $< -o $@

# comment out if do not want to rebuild noelle source files.
# ${BMARK}_cpu_noelle.c: ${BMARK}_reduced.bc
# 	$(SPLENDID_CPU) $< 2> debug
# 	mv ${BMARK}_reduced.cbe.c $@

${BMARK}_gpu_noelle.c: ${BMARK}_reduced.bc
	$(SPLENDID_GPU) $< 2> debug
	mv ${BMARK}_reduced.cbe.c $@

${BMARK}.o: ${BMARK}.cu
	${POLYGEIST}/bin/cgeist --cuda-lower -cpuify="distribute" -raise-scf-to-affine --inner-serialize=1 -resource-dir=${LLVM18}/lib/clang/18/ -O3 $< -c -o $@

openmp.clang.exe: ${BMARK}_omp.c
	clang -fopenmp -O3 ${FLAGS} $< -o $@

openmp.gcc.exe: ${BMARK}_omp.c
	gcc -fopenmp -O3 $< -o $@ ${FLAGS}


polygeist.exe: ${BMARK}.o
	clang -fopenmp -O3 ${FLAGS} $< -o $@

icx.exe: ${BMARK}_cpu.c
	icx -fopenmp -O3 $(FLAGS) $< -o $@

icx.noelle.exe: ${BMARK}_cpu_noelle.c
	icx -fopenmp -O3 $(FLAGS) $< -o $@

tulip.clang.noelle.exe: ${BMARK}_cpu_noelle.c
	clang -fopenmp -O3 $(FLAGS) $< -o $@

tulip.gcc.noelle.exe: ${BMARK}_cpu_noelle.c
	gcc -fopenmp -O3 $< -o $@ $(FLAGS)

tulip.clang.exe: ${BMARK}_cpu.c
	clang -fopenmp -O3 $(FLAGS) $< -o $@

tulip.gcc.exe: ${BMARK}_cpu.c
	gcc -fopenmp -O3 $< -o $@ $(FLAGS)

cpu.exe: ${BMARK}_reduced.bc
	clang -O3 -lm  $< -o $@

seq.exe: ${BMARK}.c
	clang -O3 -lm $< -o $@

cuda.exe: ${BMARK}.cu
	nvcc -O3 $< -o $@


check_seq: seq.exe
	./seq.exe $(TEST_ARGS) 2> seq.out

run_seq: seq.exe
	/usr/bin/time -f "%e" ./seq.exe $(PERF_ARGS) 2> seq.time

check_openmp: openmp.clang.exe openmp.gcc.exe
	./openmp.clang.exe $(TEST_ARGS) 2> openmp.clang.out
	./openmp.gcc.exe $(TEST_ARGS) 2> openmp.gcc.out

run_openmp: openmp.clang.exe openmp.gcc.exe
	/usr/bin/time -f "%e" ./openmp.clang.exe $(PERF_ARGS) 2> openmp.clang.time
	/usr/bin/time -f "%e" ./openmp.gcc.exe $(PERF_ARGS) 2> openmp.gcc.time

run_cuda: cuda.exe
	/usr/bin/time -f "%e" ./cuda.exe $(PERF_ARGS) 2> cuda.time

run_nvidia: nvtarget.exe nvtarget_noelle.exe
	/usr/bin/time -f "%e" ./nvtarget.exe $(PERF_ARGS) 2> nvidia.time
	/usr/bin/time -f "%e" ./nvtarget_noelle.exe $(PERF_ARGS) 2> nvidia.noelle.time

run_amd: amdtarget.exe amdtarget_noelle.exe
	/usr/bin/time -f "%e" ./amdtarget.exe $(PERF_ARGS) 2> amd.time
	/usr/bin/time -f "%e" ./amdtarget_noelle.exe $(PERF_ARGS) 2> amd.noelle.time

run_polygeist: polygeist.exe
	/usr/bin/time -f "%e" ./polygeist.exe $(PERF_ARGS) 2> polygeist.time

run_openacc: openacc.gpu.exe
	/usr/bin/time -f "%e" ./openacc.gpu.exe $(PERF_ARGS) 2> openacc.time

run_icx: icx.exe icx.noelle.exe
	/usr/bin/time -f "%e" ./icx.exe $(PERF_ARGS) 2> tulip.icx.time
	/usr/bin/time -f "%e" ./icx.noelle.exe $(PERF_ARGS) 2> tulip.icx.noelle.time

check_tulip: tulip.clang.noelle.exe tulip.gcc.noelle.exe tulip.clang.exe tulip.gcc.exe
	./tulip.clang.exe $(TEST_ARGS) 2> tulip.clang.out
	./tulip.gcc.exe $(TEST_ARGS) 2> tulip.gcc.out
	./tulip.clang.noelle.exe $(TEST_ARGS) 2> tulip.clang.noelle.out
	./tulip.gcc.noelle.exe $(TEST_ARGS) 2> tulip.gcc.noelle.out

run_tulip: tulip.clang.noelle.exe tulip.gcc.noelle.exe tulip.clang.exe tulip.gcc.exe
	/usr/bin/time -f "%e" ./tulip.clang.exe $(PERF_ARGS) 2> tulip.clang.time
	/usr/bin/time -f "%e" ./tulip.gcc.exe $(PERF_ARGS) 2> tulip.gcc.time
	/usr/bin/time -f "%e" ./tulip.clang.noelle.exe $(PERF_ARGS) 2> tulip.clang.noelle.time
	/usr/bin/time -f "%e" ./tulip.gcc.noelle.exe $(PERF_ARGS) 2> tulip.gcc.noelle.time

run_nvhpc: nvhpc.cpu.exe nvhpc.cpu.noelle.exe nvhpc.gpu.exe nvhpc.gpu.noelle.exe
	/usr/bin/time -f "%e" ./nvhpc.cpu.exe $(PERF_ARGS) 2> nvhpc.cpu.time
	/usr/bin/time -f "%e" ./nvhpc.cpu.noelle.exe $(PERF_ARGS) 2> nvhpc.cpu.reduced.time
	/usr/bin/time -f "%e" ./nvhpc.gpu.exe $(PERF_ARGS) 2> nvhpc.gpu.time
	/usr/bin/time -f "%e" ./nvhpc.gpu.noelle.exe $(PERF_ARGS) 2> nvhpc.gpu.reduced.time

run_manual:  manual.clang.cpu.exe manual.gcc.cpu.exe
	/usr/bin/time -f "%e" ./manual.clang.cpu.exe $(PERF_ARGS) 2> manual.clang.cpu.time
	/usr/bin/time -f "%e" ./manual.gcc.cpu.exe $(PERF_ARGS) 2> manual.gcc.cpu.time

run_nvmanual: manual.clang.gpu.exe manual.nvc.gpu.exe
	/usr/bin/time -f "%e" ./manual.clang.gpu.exe $(PERF_ARGS) 2> manual.clang.gpu.time
	/usr/bin/time -f "%e" ./manual.nvc.gpu.exe $(PERF_ARGS) 2> manual.nvc.gpu.time

run_amdmanual: manual.clang.amd.exe
	/usr/bin/time -f "%e" ./manual.clang.amd.exe $(PERF_ARGS) 2> manual.clang.amd.time

clean:
	rm -rf *.ll *.bc *.cbe.c *.exe debug *.o loopIDtoSrc.txt debug_cudafe *.log
